// Code generated by mockery v1.0.0. DO NOT EDIT.

package kayak

import mock "github.com/stretchr/testify/mock"

// MockRunner is an autogenerated mock type for the Runner type
type MockRunner struct {
	mock.Mock
}

// Apply provides a mock function with given fields: data
func (_m *MockRunner) Apply(data []byte) (interface{}, uint64, error) {
	ret := _m.Called(data)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func([]byte) interface{}); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 uint64
	if rf, ok := ret.Get(1).(func([]byte) uint64); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Get(1).(uint64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func([]byte) error); ok {
		r2 = rf(data)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Init provides a mock function with given fields: config, peers, logs, stable, transport
func (_m *MockRunner) Init(config Config, peers *Peers, logs LogStore, stable StableStore, transport Transport) error {
	ret := _m.Called(config, peers, logs, stable, transport)

	var r0 error
	if rf, ok := ret.Get(0).(func(Config, *Peers, LogStore, StableStore, Transport) error); ok {
		r0 = rf(config, peers, logs, stable, transport)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Shutdown provides a mock function with given fields: wait
func (_m *MockRunner) Shutdown(wait bool) error {
	ret := _m.Called(wait)

	var r0 error
	if rf, ok := ret.Get(0).(func(bool) error); ok {
		r0 = rf(wait)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePeers provides a mock function with given fields: peers
func (_m *MockRunner) UpdatePeers(peers *Peers) error {
	ret := _m.Called(peers)

	var r0 error
	if rf, ok := ret.Get(0).(func(*Peers) error); ok {
		r0 = rf(peers)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

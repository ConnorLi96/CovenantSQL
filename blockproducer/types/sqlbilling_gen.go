package types

// Code generated by github.com/CovenantSQL/HashStablePack DO NOT EDIT.

import (
	hsp "github.com/CovenantSQL/HashStablePack/marshalhash"
)

// MarshalHash marshals for hash
func (z *SQLBilling) MarshalHash() (o []byte, err error) {
	var b []byte
	o = hsp.Require(b, z.Msgsize())
	// map header, size 3
	o = append(o, 0x83, 0x83)
	if oTemp, err := z.DefaultHashSignVerifierImpl.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = hsp.AppendBytes(o, oTemp)
	}
	o = append(o, 0x83)
	if oTemp, err := z.SQLBillingHeader.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = hsp.AppendBytes(o, oTemp)
	}
	o = append(o, 0x83)
	if oTemp, err := z.TransactionTypeMixin.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = hsp.AppendBytes(o, oTemp)
	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SQLBilling) Msgsize() (s int) {
	s = 1 + 28 + z.DefaultHashSignVerifierImpl.Msgsize() + 17 + z.SQLBillingHeader.Msgsize() + 21 + z.TransactionTypeMixin.Msgsize()
	return
}

// MarshalHash marshals for hash
func (z *SQLBillingHeader) MarshalHash() (o []byte, err error) {
	var b []byte
	o = hsp.Require(b, z.Msgsize())
	// map header, size 3
	o = append(o, 0x83, 0x83)
	o = hsp.AppendArrayHeader(o, uint32(len(z.SQLChainHeaders)))
	for za0001 := range z.SQLChainHeaders {
		if z.SQLChainHeaders[za0001] == nil {
			o = hsp.AppendNil(o)
		} else {
			if oTemp, err := z.SQLChainHeaders[za0001].MarshalHash(); err != nil {
				return nil, err
			} else {
				o = hsp.AppendBytes(o, oTemp)
			}
		}
	}
	o = append(o, 0x83)
	if oTemp, err := z.Nonce.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = hsp.AppendBytes(o, oTemp)
	}
	o = append(o, 0x83)
	if oTemp, err := z.TargetSQLChain.MarshalHash(); err != nil {
		return nil, err
	} else {
		o = hsp.AppendBytes(o, oTemp)
	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SQLBillingHeader) Msgsize() (s int) {
	s = 1 + 16 + hsp.ArrayHeaderSize
	for za0001 := range z.SQLChainHeaders {
		if z.SQLChainHeaders[za0001] == nil {
			s += hsp.NilSize
		} else {
			s += z.SQLChainHeaders[za0001].Msgsize()
		}
	}
	s += 6 + z.Nonce.Msgsize() + 15 + z.TargetSQLChain.Msgsize()
	return
}
